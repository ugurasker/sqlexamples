/*=========================== EXISTS, NOT EXIST ================================
    EXISTS operatorü bir Boolean operatördür ve true - false de?er döndürür. 
    EXISTS operatorü s?kl?kla Subquery'lerde sat?rlar?n do?rulu?unu test etmek 
    için kullan?l?r.
    IN tum tabloya bakar , daha yavastir existe gore.
    
    E?er bir subquery (altsorgu) bir sat?r? döndürürse EXIST operatörü de TRUE 
    de?er döndürür. Aksi takdirde, FALSE de?er döndürecektir.
    
    Özellikle altsorgularda h?zl? kontrol i?lemi gerçekle?tirmek için kullan?l?r
==============================================================================*/
CREATE TABLE mart_satislar 
    (
        urun_id number(10),
        musteri_isim varchar2(50), 
        urun_isim varchar2(50)
    );
    
    CREATE TABLE nisan_satislar 
    (
        urun_id number(10),
        musteri_isim varchar2(50), 
        urun_isim varchar2(50)
    );
    
    INSERT INTO mart_satislar VALUES (10, 'Mark', 'Honda');
    INSERT INTO mart_satislar VALUES (10, 'Mark', 'Honda');
    INSERT INTO mart_satislar VALUES (20, 'John', 'Toyota');
    INSERT INTO mart_satislar VALUES (30, 'Amy', 'Ford');
    INSERT INTO mart_satislar VALUES (20, 'Mark', 'Toyota');
    INSERT INTO mart_satislar VALUES (10, 'Adem', 'Honda');
    INSERT INTO mart_satislar VALUES (40, 'John', 'Hyundai');
    INSERT INTO mart_satislar VALUES (20, 'Eddie', 'Toyota');
    
    INSERT INTO nisan_satislar VALUES (10, 'Hasan', 'Honda');
    INSERT INTO nisan_satislar VALUES (10, 'Kemal', 'Honda');
    INSERT INTO nisan_satislar VALUES (20, 'Ayse', 'Toyota');
    INSERT INTO nisan_satislar VALUES (50, 'Yasar', 'Volvo');
    INSERT INTO nisan_satislar VALUES (20, 'Mine', 'Toyota');

    SELECT * FROM mart_satislar;
    SELECT * FROM nisan_satislar;
    DELETE FROM nisan_satislar;
    
   /* ORNEK1: MART VE N?SAN aylar?nda ayn? URUN_ID ile sat?lan ürünlerin
  URUN_ID’lerini listeleyen ve ayn? zamanda bu ürünleri MART ay?nda alan
  MUSTERI_ISIM 'lerini listeleyen bir sorgu yaz?n?z. */
  
  SELECT musteri_isim,urun_id FROM mart_satislar 
  WHERE EXISTS (SELECT urun_id FROM nisan_satislar 
                 WHERE mart_satislar.urun_id=urun_id);
 /* -----------------------------------------------------------------------------
  ORNEK2: Her iki ayda da sat?lan ürünlerin URUN_ISIM'lerini ve bu ürünleri
  N?SAN ay?nda sat?n alan MUSTERI_ISIM'lerini listeleyen bir sorgu yaz?n?z. 
 -----------------------------------------------------------------------------*/
 SELECT musteri_isim,urun_isim FROM nisan_satislar
 WHERE EXISTS (SELECT urun_id FROM mart_satislar
                WHERE mart_satislar.urun_id = nisan_satislar.urun_id);
 
 /* ----------------------------------------------------------------------------
  ORNEK3: Her iki ayda da ortak olarak sat?lmayan ürünlerin URUN_ISIM'lerini 
  ve bu ürünleri N?SAN ay?nda sat?n alan MUSTERI_ISIM'lerini listeleyiniz. 
 -----------------------------------------------------------------------------*/                
 SELECT musteri_isim,urun_isim FROM nisan_satislar
 WHERE NOT EXISTS (SELECT urun_id FROM mart_satislar
                WHERE mart_satislar.urun_id = nisan_satislar.urun_id); 
  /*===================== IS NULL, IS NOT NULL, COALESCE ========================
    
    IS NULL, ve IS NOT NULL BOOLEAN operatörleridir. Bir ifadenin NULL olup 
    olmad???n? kontrol ederler.  
    
    COALESCE ise bir fonksiyondur ve içerisindeki parameterelerden NULL olmayan
    ilk ifadeyi döndürür. E?er ald??? tüm ifadeler NULL ise NULL döndürürür.
    
    COALESCE(ifade1, ifade2, .....ifadeN)
    
==============================================================================*/               
  CREATE TABLE insanlar 
    (
        ssn CHAR(9),
        isim VARCHAR2(50), 
        adres VARCHAR2(50) 
    );
?
    INSERT INTO insanlar VALUES(123456789, 'Ali Can', 'Istanbul');
    INSERT INTO insanlar VALUES(234567890, 'Veli Cem', 'Ankara');
    INSERT INTO insanlar VALUES(345678901, 'Mine Bulut', 'Izmir');
    INSERT INTO insanlar (ssn, adres) VALUES(456789012, 'Bursa');
    INSERT INTO insanlar (ssn, adres) VALUES(567890123, 'Denizli');
    INSERT INTO insanlar (adres) VALUES('Sakarya');
    INSERT INTO insanlar (ssn) VALUES(999111222);
    
    SELECT * FROM insanlar WHERE isim IS NULL;
    
    SELECT * FROM insanlar WHERE isim IS NOT NULL;
    
    UPDATE insanlar 
    SEt isim='no name'
    WHERE isim IS NULL; 
    
    SELECT * FROM insanlar;
    
    * ----------------------------------------------------------------------------
  ORNEK4:   isim ’i NULL olanlara ‘Henuz isim girilmedi’
            adres ’i NULL olanlara ‘Henuz adres girilmedi’
            ssn ’i NULL olanlara ‘Henuz ssn girilmedi’ atayal?m.
-----------------------------------------------------------------------------*/
UPDATE insanlar
SET isim = COALESCE (isim,'henuz isim girilmedi'),
adres = COALESCE (adres,'henuz adres girilmedi'),
ssn = COALESCE (ssn,'no ssn');
/*================================ ORDER BY  ===================================
   ORDER BY cümleci?i bir SORGU deyimi içerisinde belli bir SUTUN’a göre 
   SIRALAMA yapmak için kullan?l?r.
   
   Syntax
   -------
      ORDER BY sutun_adi ASC   -- ARTAN
      ORDER BY sutun_adi DESC  -- AZALAN
==============================================================================*/
      CREATE TABLE kisiler 
    (
        ssn char(9) PRIMARY KEY,
        isim VARCHAR2(50), 
        soyisim VARCHAR2(50), 
        maas NUMBER,
        adres VARCHAR2(50) 
    );
    
    INSERT INTO kisiler VALUES(123456789, 'Ali','Can', 3000,'Istanbul');
    INSERT INTO kisiler VALUES(234567890, 'Veli','Cem', 2890,'Ankara');
    INSERT INTO kisiler VALUES(345678901, 'Mine','Bulut',4200,'Ankara');
    INSERT INTO kisiler VALUES(256789012, 'Mahmut','Bulut',3150,'Istanbul');
    INSERT INTO kisiler VALUES (344678901, 'Mine','Yasa', 5000,'Ankara');
    INSERT INTO kisiler VALUES (345458901, 'Veli','Yilmaz',7000,'Istanbul');
?
    SELECT * FROM kisiler  
    ORDER BY adres;
    
    SELECT* FROM kisiler
    ORDER BY maas;
    
    SELECT *FROM kisiler
    WHERE isim = 'Mine'
     ORDER BY ssn DESC ;
     
     SELECT*FROM kisiler
     WHERE soyisim = 'Bulut'
     ORDER BY isim;
    /* isim yerine sutun sayisi 2 yazabiliriz */
    
    DROP TABLE kisiler;
    /*====================== FETCH NEXT, OFFSET (12C VE ÜSTÜ) ======================
   FETCH cümleci?i ile listelenecek kay?tlar? s?n?rland?rabiliriz. ?stersek 
   sat?r say?s?na göre istersek de toplam sat?r say?s?n?n belli bir yüzdesine 
   göre s?n?rland?rma koymak mümkündür. 
   
   Syntax
   ---------
   FETCH NEXT satir_sayisi ROWS ONLY;
   FETCH NEXT satir_yuzdesi PERCENT ROWS ONLY;
   
   
   OFFSET Cümleci?i ile de listenecek olan sat?rlardan s?ras?yla istedi?imiz 
   kadar?n? atlayabiliriz.  
   
   Syntax
   ----------
   OFFSET sat?r_sayisi ROWS;
  
==============================================================================*/ 
    
   /*  ----------------------------------------------------------------------------
  ORNEK1: MAA?’? en yüksek 3 ki?inin bilgilerini listeleyen sorguyu yaz?n?z.
-----------------------------------------------------------------------------*/
SELECT*FROM kisiler
ORDER BY maas DESC
FETCH NEXT 3 ROWS ONLY;

 /*  4. ILE 6. KISILER MAASA GORE */
SELECT*FROM kisiler
ORDER BY maas DESC
OFFSET 3 ROWS
FETCH NEXT 3 ROWS;

 /*============================= GROUP BY =====================================
    
    GROUP BY cümleci?i bir SELECT ifadesinde sat?rlar?, sutunlar?n de?erlerine 
    göre özet olarak gruplamak için kullan?l?r. 
   
    GROUP BY cümlece?i her grup ba??na bir sat?r döndürür. 
    
    GROUP BY genelde, AVG(),COUNT(),MAX(),MIN() ve SUM() gibi aggregate 
    fonksiyonlar? ile birlikte kullan?l?r.
    
==============================================================================*/
CREATE TABLE manav 
    (
        isim varchar2(50), 
        urun_adi varchar2(50), 
        urun_miktari number(9) 
    );
    
    INSERT INTO manav VALUES( 'Ali', 'Elma', 5);
    INSERT INTO manav VALUES( 'Ayse', 'Armut', 3);
    INSERT INTO manav VALUES( 'Veli', 'Elma', 2);
    INSERT INTO manav VALUES( 'Hasan', 'Uzum', 4);
    INSERT INTO manav VALUES( 'Ali', 'Armut', 2);
    INSERT INTO manav VALUES( 'Ayse', 'Elma', 3);
    INSERT INTO manav VALUES( 'Veli', 'Uzum', 4);
    INSERT INTO manav VALUES( 'Ali', 'Armut', 2);
    INSERT INTO manav VALUES( 'Veli', 'Elma', 3);
    INSERT INTO manav VALUES( 'Ayse', 'Uzum', 4);
    INSERT INTO manav VALUES( 'Ali', '', 2);
   /* -----------------------------------------------------------------------------
  ORNEK1: kisi ismine göre sat?lan toplam meyve miktarlar?n? gösteren sorguyu
  yaz?n?z.
------------------------------------------------------------------------------*/

SELECT isim,SUM(urun_miktari) AS toplam_urun
FROM manav GROUP BY isim
/*ORDER BY SUM(urun_miktari) ; */
/* ----------------------------------------------------------------------------
  ORNEK2: sat?lan meyve türüne (urun_adi) göre urun alan ki?i say?s?n? gösteren
  sorguyu yaz?n?z. NULL olarak girilen meyveyi listelemesin.
-----------------------------------------------------------------------------*/

 SELECT urun_adi, COUNT(isim) AS kisi_sayisi
 FROM manav
 WHERE urun_adi IS NOT NULL
 GROUP BY urun_adi;  
 
 /* ----------------------------------------------------------------------------
  ORNEK3: sat?lan meyve türüne (urun_adi) göre sat?lan MIN ve MAX urun
  miktarlarini MAX urun miktarina göre s?ralayarak listeyen sorguyu yaz?n?z.
----------------------------------------------------------------------------*/

  SELECT urun_adi, MIN(urun_miktari) AS min, MAX(urun_miktari) AS max 
    FROM manav
    WHERE urun_adi IS NOT NULL
    GROUP BY urun_adi
    ORDER BY MAX(urun_miktari);
    
 /* ----------------------------------------------------------------------------
  ORNEK4: kisi ismine ve urun ad?na göre sat?lan ürünlerin toplam?n?
 grupland?ran ve isime göre ters s?ras?da listeyen sorguyu yaz?n?z.
-----------------------------------------------------------------------------*/
SELECT isim, urun_adi,SUM(urun_miktari)
FROM manav
GROUP BY isim,urun_adi
ORDER BY isim DESC;

/* ----------------------------------------------------------------------------
  ORNEK5: kisi ismine ve urun ad?na göre sat?lan ürünlerin toplam?n? bulan ve
  ve bu toplam de?eri 3'den fazla olanlar? listeyen sorguyu yaz?n?z.
-----------------------------------------------------------------------------*/
SELECT isim, urun_adi, SUM(urun_miktari) AS toplam_miktar
FROM manav
GROUP BY isim, urun_adi
HAVING SUM(urun_miktari) > 3
ORDER BY SUM(urun_miktari) DESC;

-- AGGREGATE fonksiyonlar? ile ilgili bir ko?ul koymak için GROUP BY’dan
    -- sonra HAVING cümleci?i kullan?l?r.
    
    /* ----------------------------------------------------------------------------
  ORNEK6: sat?lan urun_adi’na göre MAX urun say?lar?n? s?ralayarak listeyen
  sorguyu yaz?n?z. NOT: Sorgu, sadece MAKS urun_miktari MIN urun_miktar?na
  e?it olmayan kay?tlar? listelemelidir.
-----------------------------------------------------------------------------*/
SELECT urun_adi,MAX(urun_miktari)
from manav
GROUP BY urun_adi
HAVING MAX(urun_miktari)<>MIN(urun_miktari)
ORDER BY MAX(urun_miktari);

/* ----------------------------------------------------------------------------
  ORNEK1: sat?lan farkl? meyve türlerinin say?s?n?  listeyen sorguyu yaz?n?z.
-----------------------------------------------------------------------------*/
SELECT COUNT(DISTINCT urun_adi) AS urun_sayisi
FROM manav;

/* satilan meyve ve isimleri farli olanlarini listeleyin */
SELECT DISTINCT urun_adi, isim
FROM manav;

/* ----------------------------------------------------------------------------
  ORNEK3: sat?lan meyvelerin urun_mikarlarinin benzersiz  toplamlarini
  listeyen sorguyu yaz?n?z.
-----------------------------------------------------------------------------*/
SElECT SUM(DISTINCT urun_miktari) as urun_sayisi
FROM manav;

SELECT DISTINCT isim FROM manav;

